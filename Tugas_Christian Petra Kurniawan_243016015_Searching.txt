#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX 100

typedef struct {
    int antrian;
    char nama[100];
} ant;

void bubbleSort(ant data[], int n) {
    int i,j;
    for ( i = 0; i < n - 1; i++) {
        for ( j = 0; j < n - i - 1; j++) {
            if (data[j].antrian > data[j + 1].antrian) {
                ant temp = data[j];
                data[j] = data[j + 1];
                data[j + 1] = temp;
            }
        }
    }
}

int linearSearch(ant data[], int n, int targetKode) {
    int i;
    for ( i = 0; i < n; i++) {
        if (data[i].antrian == targetKode)
            return i;
    }
    return -1;
}

int binarySearch(ant data[], int n, int targetKode) {
    int left = 0, right = n - 1;
    while (left <= right) {
        int mid = (left + right) / 2;
        if (data[mid].antrian == targetKode)
            return mid;
        else if (data[mid].antrian < targetKode)
            left = mid + 1;
        else
            right = mid - 1;
    }
    return -1;
}

void tampilkanData(ant data[], int n) {
    int i;
    printf("\n=== Data Antrian ===\n");
    for ( i = 0; i < n; i++) {
        printf("[%d] %s\n", data[i].antrian, data[i].nama);
    }
}

int main() {
    ant data[MAX];
    int n, choice, targetKode, index;

    printf("Masukkan jumlah data: ");
    scanf("%d", &n);

    for (int i = 0; i < n; i++) {
        printf("Data ke-%d\n", i + 1);
        printf("  Nomor antrian : ");
        scanf("%d", &data[i].antrian);
        printf("  Nama          : ");
        scanf(" %[^\n]", data[i].nama);
    }

    do {
        system("cls");
        printf("\nData asli tetap:\n");
        tampilkanData(data, n);
        printf("\n=== MENU PENCARIAN ANTRIAN ===\n");
        printf("1. Pencarian Linear\n");
        printf("2. Pencarian Binary (Data akan diurutkan dulu)\n");
        printf("0. Keluar\n");
        printf("Pilihan: ");
        scanf("%d", &choice);

        switch (choice) {
            case 0:
                printf("Terima kasih!\n");
                system("pause");
                return 0;

            case 1:
                printf("Masukkan Nomor Antrian yang ingin dicari: ");
                scanf("%d", &targetKode);
                index = linearSearch(data, n, targetKode);
                if (index != -1)
                    printf("Ditemukan: [%d] %s\n", data[index].antrian, data[index].nama);
                else
                    printf("Nomor antrian %d tidak ditemukan.\n", targetKode);
                    system("pause");
                break;

            case 2:
                printf("Masukkan Nomor Antrian yang ingin dicari: ");
                scanf("%d", &targetKode);
                ant temp[MAX];
                memcpy(temp, data, sizeof(ant) * n);
                bubbleSort(temp, n);
                index = binarySearch(temp, n, targetKode);
                printf("\nData yang sudah diurutkan:\n");
                tampilkanData(temp, n);

                if (index != -1)
                    printf("Ditemukan: [%d] %s\n", temp[index].antrian, temp[index].nama);
                else
                    printf("Nomor antrian %d tidak ditemukan.\n", targetKode);
                    system("pause");
                break;

            default:
                printf("Pilihan tidak valid!\n");
                system("pause");
        }


    } while (choice!=0);

    return 0;
}
